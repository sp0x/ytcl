<?xml version="1.0"?>
<doc>
<assembly>
<name>
ytDownloader
</name>
</assembly>
<members>
<member name="M:ytDownloader.Extraction.VideoParsers.StreamOutput.Flush">
	<summary>
 Flushes the buffer
 </summary>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.AudioExtractors.Mp3AudioExtractor.WriteChunk(System.Byte[],System.UInt32)">
	<summary>
 Writes the FLV Buffer, by extracting it to a MP3 Frame.
 </summary>
	<param name="chunk">The buffer to write</param>
	<param name="timeStamp">Not used</param>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.AudioExtractors.Mp3AudioExtractor.getMp3FrameInfo(System.UInt64@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Parses the main information from the frame
 </summary>
	<param name="header">The header flag</param>
	<param name="mpegVersion"></param>
	<param name="layer"></param>
	<param name="bitrate"></param>
	<param name="padding"></param>
	<param name="channelMode"></param>
	<param name="sampleRate"></param>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.AudioExtractors.Mp3AudioExtractor.calcSampleRate(System.Int32,System.Int32@)">
	<summary>
 Gets ssamplerate, based on the version of MPEG
 </summary>
	<param name="mpgVersion"></param>
	<param name="sampleRate"></param>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.AudioExtractors.Mp3AudioExtractor.checkForVBRHeader(System.Byte[],System.Collections.Generic.List{System.UInt32},System.Int32,System.Int32,System.Int32,ytDownloader.Extraction.AudioExtractors.Mp3AudioExtractor@)">
	<summary>
 Checks if the given frame is a VBR Header frame.
 </summary>
	<param name="buffer">The buffer for the frame</param>
	<param name="frameOffsets">The list of frame offsets</param>
	<param name="offset">The current offset</param>
	<param name="mpgVersion">MPEG Version</param>
	<param name="chanMode">Channel count</param>
	<param name="mp3Extractor">The extractor to modify</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.VideoParsers.FlvFileParser.ExtractStreams">
	<exception cref="T:ytDownloader.Extraction.AudioExtractors.AudioExtractionException">The input file is not an FLV file.</exception>
</member><member name="M:ytDownloader.UrlExtensions.URLDecode(System.String)">
	<summary>
 Decodes URLs, which are encoded with the % hex type encoding, and + for spaces.
 </summary>
	<param name="url">The url to decode</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ytDownloader.Extraction.AudioExtractors.AudioExtractionException">
	<summary>
 The exception that is thrown when an error occurs durin audio extraction.
 </summary>
</member><member name="M:ytDownloader.Extraction.IAudioExtractor.WriteChunk(System.Byte[],System.UInt32)">
	<exception cref="T:ytDownloader.Extraction.AudioExtractors.AudioExtractionException">An error occured while writing the chunk.</exception>
</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.AdaptiveType">
	<summary>
 Gets an enum indicating whether the format is adaptive or not.
</summary>
	<value>
		<c>AdaptiveType.Audio</c> or <c>AdaptiveType.Video</c> if the format is adaptive;
otherwise, <c>AdaptiveType.None</c>
	</value>
</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.AudioBitrate">
	<summary>"
The approximate audio bitrate in kbit/s."
</summary>"
<value>The approximate audio bitrate in kbit/s, or 0 if the bitrate is unknown.</value>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.AudioExtension">
	<summary>"
Gets the audio extension."
</summary>"
<value>The audio extension, or <c>null</c> if the audio extension is unknown.</value>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.AudioType">
	<summary>"
Gets the audio type (encoding)."
</summary>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.CanExtractAudio">
	<summary>"
Gets a value indicating whether the audio of this video can be extracted by YoutubeExtractor."
</summary>"
<value>"
<c>true</c> if the audio of this video can be extracted by YoutubeExtractor; otherwise, <c>false</c>."
</value>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.DownloadUrl">
	<summary>"
Gets the download URL."
</summary>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.FormatCode">
	<summary>"
Gets the format code, that is used by YouTube internally to differentiate between"
quality profiles."
</summary>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.Resolution">
	<summary>"
Gets the resolution of the video."
</summary>"
<value>The resolution of the video, or 0 if the resolution is unkown.</value>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.Title">
	<summary>"
Gets the video title."
</summary>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.VideoExtension">
	<summary>"
Gets the video extension."
</summary>"
<value>The video extension, or <c>null</c> if the video extension is unknown.</value>"

</member><member name="P:ytDownloader.Extraction.VideoCodecInfo.VideoType">
	<summary>"
Gets the video type (container)."
</summary>"

</member><member name="M:ytDownloader.DownloadOptionsBuilder.CompileCodecSelector(System.Boolean,System.String,System.Int32)">
	<summary>
 Creates a predicate for the filtering of available video codecs.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="E:ytDownloader.AudioDownloader.AudioExtractionProgressChanged">
	<summary>
 Occurs when the progress of the audio extraction has changed.
 </summary>
</member><member name="E:ytDownloader.AudioDownloader.DownloadProgressChanged">
	<summary>
 Occurs when the download progress of the video file has changed.
 </summary>
</member><member name="M:ytDownloader.AudioDownloader.StartDownloading">
	<summary>
 Downloads the video from YouTube and then extracts the audio track out if it.
 </summary>
	<exception cref="T:System.IO.IOException">
 The temporary video file could not be created.
 - or -
 The audio file could not be created.
 </exception>
	<exception cref="T:ytDownloader.Extraction.AudioExtractors.AudioExtractionException">An error occured during audio extraction.</exception>
	<exception cref="T:System.Net.WebException">An error occured while downloading the video.</exception>
</member><member name="M:ytDownloader.AudioDownloader.DownloadVideo(System.String)">
	<summary>
 Downloads the FLV.
 </summary>
	<param name="path">The path where it should be saved</param>
	<remarks></remarks>
</member><member name="M:ytDownloader.AudioDownloader.ExtractAudio(System.String)">
	<summary>
 Extracts the audio stream from a given F
 </summary>
	<param name="path">The path to the downloaded Flv file.</param>
	<remarks></remarks>
</member><member name="T:ytDownloader.AudioDownloader">
	<summary>
 Provides a method to download a video and extract its audio track.
 </summary>
</member><member name="T:ytDownloader.Extraction.VideoType">
	<summary>
 The video type. Also known as video container.
 </summary>
</member><member name="M:ytDownloader.Extraction.YtUrlDecoder.DecryptDownloadUrl(ytDownloader.Extraction.VideoCodecInfo)">
	<summary>
Decrypts the signature in the <see cref="P:ytDownloader.Extraction.VideoCodecInfo.DownloadUrl"/> property and sets it
to the decrypted URL. Use this method, if you have decryptSignature in the <see cref="!:GetDownloadUrls"/> method set to false.
</summary>
	<param name="videoInfo">The video info which's downlaod URL should be decrypted.</param>
	<exception cref="T:ytDownloader.Extraction.YoutubeParseException">
There was an error while deciphering the signature.
</exception>
</member><member name="M:ytDownloader.Extraction.YtUrlDecoder.GetVideo(System.String,System.Boolean)">
	<summary>
 Gets a list of <see cref="T:ytDownloader.Extraction.VideoCodecInfo"/>s for the specified URL.
 </summary>
	<param name="videoUrl">The URL of the YouTube video.</param>
	<param name="decryptSignature">
 A value indicating whether the video signatures should be decrypted or not. Decrypting
 consists of a HTTP request for each <see cref="T:ytDownloader.Extraction.VideoCodecInfo"/>, so you may want to set
 this to false and call <see cref="M:ytDownloader.Extraction.YtUrlDecoder.DecryptDownloadUrl(ytDownloader.Extraction.VideoCodecInfo)"/> on your selected <see cref="T:ytDownloader.Extraction.VideoCodecInfo"/> later.
 </param>
	<returns>A list of <see cref="T:ytDownloader.Extraction.VideoCodecInfo"/>s that can be used to download the video.</returns>
	<exception cref="T:System.ArgumentNullException">
 The <paramref name="videoUrl"/> parameter is <c>null</c>.
 </exception>
	<exception cref="T:System.ArgumentException">
 The <paramref name="videoUrl"/> parameter is not a valid YouTube URL.
 </exception>
	<exception cref="T:ytDownloader.Extraction.VideoNotAvailableException">The video is not available.</exception>
	<exception cref="T:System.Net.WebException">
 An error occurred while downloading the YouTube page html.
 </exception>
	<exception cref="T:ytDownloader.Extraction.YoutubeParseException">The Youtube page could not be parsed.</exception>
</member><member name="M:ytDownloader.Extraction.YtUrlDecoder.TryNormalizeYoutubeUrl(System.String@)">
	<summary>
Normalizes the given YouTube URL to the format http://youtube.com/watch?v={youtube-id}
and returns whether the normalization was successful or not.
</summary>
	<param name="url">The YouTube URL to normalize.</param>
	<returns>
		<c>true</c>, if the normalization was successful; <c>false</c>, if the URL is invalid.
</returns>
</member><member name="T:ytDownloader.Extraction.YtUrlDecoder">
	<summary>
Provides a method to get the download link of a YouTube video.
</summary>
</member><member name="E:ytDownloader.Downloader.DownloadFinished">
	<summary>
 Occurs when the download finished.
 </summary>
</member><member name="E:ytDownloader.Downloader.DownloadStarted">
	<summary>
 Occurs when the download is starts.
 </summary>
</member><member name="P:ytDownloader.Downloader.InputUrl">
	<summary>
 The url for the video/audio you want to download
 </summary>
</member><member name="P:ytDownloader.Downloader.BytesToDownload">
	<summary>
 Gets the number of bytes to download. <c>null</c>, if everything is downloaded.
 </summary>
</member><member name="P:ytDownloader.Downloader.OutputPath">
	<summary>
 Gets the path to save the video/audio.
 </summary>
</member><member name="P:ytDownloader.Downloader.VideoCodec">
	<summary>
 Gets the video to download/convert.
 </summary>
</member><member name="M:ytDownloader.Downloader.StartDownloading">
	<summary>
 Starts the work of the <see cref="T:ytDownloader.Downloader"/>.
 </summary>
</member><member name="T:ytDownloader.Downloader">
	<summary>
 Provides the base class for the <see cref="T:ytDownloader.AudioDownloader"/> and <see cref="T:ytDownloader.VideoDownloader"/> class.
 </summary>
</member><member name="M:ytDownloader.Extraction.VideoParsers.ChannelExtractor.#ctor(System.String,System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:ytDownloader.Extraction.VideoParsers.ChannelExtractor"/> class.
 </summary>
	<param name="inputPath">The path of the input.</param>
	<param name="outputPath">The path of the output without extension.</param>
</member><member name="M:ytDownloader.Extraction.VideoParsers.ChannelExtractor.GetAudioWriter(System.UInt32)">
	<summary>
 ' Find out the apropriate streamwriter, to use for the audio writing.
 </summary>
	<param name="mediaInfo">The media-info, contains the type of the audio stream.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ytDownloader.Extraction.ProgressEventArgs.Cancel">
	<summary>
 Gets or sets a token whether the operation that reports the progress should be canceled.
 </summary>
</member><member name="P:ytDownloader.Extraction.ProgressEventArgs.ProgressPercentage">
	<summary>
 Gets the progress percentage in a range from 0.0 to 100.0.
 </summary>
</member><member name="P:ytDownloader.Extraction.ProgressEventArgs.Flag">
	<summary>
 This holds an additional identification value.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ytDownloader.Extraction.ProgressEventArgs">
	<summary>
 This class holds progress information and completion percentage.
 </summary>
	<remarks></remarks>
</member><member name="T:ytDownloader.Extraction.YoutubeParseException">
	<summary>
		<para>
 The exception that is thrown when the YouTube page could not be parsed.
 This happens, when YouTube changes the structure of their page.
 </para>
 Please report when this exception happens at www.github.com/flagbug/YoutubeExtractor/issues
 </summary>
</member><member name="E:ytDownloader.VideoDownloader.DownloadProgressChanged">
	<summary>
 Occurs when the downlaod progress of the video file has changed.
 </summary>
</member><member name="M:ytDownloader.VideoDownloader.StartDownloading">
	<summary>
 Starts the video download.
 </summary>
	<exception cref="T:System.IO.IOException">The video file could not be saved.</exception>
	<exception cref="T:System.Net.WebException">An error occured while downloading the video.</exception>
</member><member name="T:ytDownloader.VideoDownloader">
	<summary>
 Provides a method to download a video from YouTube.
 </summary>
</member><member name="M:ytDownloader.Extraction.AudioExtractors.AudioChannelExtractor.#ctor(System.String)">
	<summary>
 Creates a new Audio channel extractor, binded to the given output path
 </summary>
	<param name="outputPath"></param>
	<remarks></remarks>
</member><member name="P:ytDownloader.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ytDownloader.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ytDownloader.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:ytDownloader.Extraction.BitConverterEx.DoubleToInt64Bits(System.Double)">
	<summary>
 Converts the specified double-precision floating point number to a 64-bit signed integer.
 </summary>
	<param name="d"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ytDownloader.Extraction.BitConverterEx.GetBytes(System.Boolean)">
	<summary>
 Returns the specified Boolean value as an array of bytes.
 </summary>
	<param name="bool"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ytDownloader.Extraction.VideoNotAvailableException">
	<summary>
 The exception that is thrown when the video is not available for viewing.
 This can happen when the uploader restricts the video to specific countries.
 </summary>
</member>
</members>
</doc>